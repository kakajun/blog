import{g as s,f as t,G as p}from"./common-bec3f312.js";const n='{"title":"svn管理","frontmatter":{"date":"2022-02-07","title":"svn管理","tags":["svn","插件"],"describe":"分支管理"},"headers":[{"level":2,"title":"svn 分支简述","slug":"svn-分支简述"},{"level":2,"title":"svn 分支管理","slug":"svn-分支管理"},{"level":2,"title":"svn 分支应用","slug":"svn-分支应用"}],"relativePath":"docs/plugin/svn.md","lastUpdated":1644244028049.3818}';var e={};const r=p('<p>最近项目用上了 svn 分支管理，因为项目太过庞杂，版本迭代也过于频繁，致使多个版本的代码交杂在一起，难以维护，无法保证其中某个版本的稳定性。当然，我们也用过很土的办法，代码复制一份出来，但是，这个副本也需要加上新开发的功能。</p><p>所以，我们决定使用 svn 分支管理。当然，这有代价，svn 版本管理对二进制文件不友好，可能文件分支合并时二进制文件会难以处理。（这里说的二进制文件，泛指所有非文本文件，比如说美术资源，策划文档）</p><h2 id="svn-分支简述"><a class="header-anchor" href="#svn-分支简述" aria-hidden="true">#</a> svn 分支简述</h2><p>使用分支最主要的目的是，多个分支可以并行，相互不干扰，而且任何时候都可以合并。其次，容易保证主干的稳定性。</p><p><strong>没有分支</strong>的时候，你的 svn 可能是这样的：</p><p><img src="https://img-blog.csdn.net/20160630212349923" alt=""></p><p>就一份代码存在主干（trunk），当然也不会有主干这个说法。开发完 1.0，继续开发 2.0，版本一个一个迭代。</p><p><strong>有了分支</strong>后，你的 svn 可能就是这样的了：</p><p><img src="https://img-blog.csdn.net/20160630212749408" alt=""></p><p>主干用来存放稳定的代码，每个版本都会开一个分支，等版本完成后再合并到主干。版本一个一个迭代，但可以并行开发。</p><h2 id="svn-分支管理"><a class="header-anchor" href="#svn-分支管理" aria-hidden="true">#</a> svn 分支管理</h2><p>接下来，简单讲解下 如何使用 svn 做分支管理。</p><p><strong>第一步，建立主干分支目录结构</strong></p><p><img src="https://img-blog.csdn.net/20160630214227494" alt=""></p><p><strong>第二步，创建分支</strong></p><p>在主干目录 trunk 右键，在 svn 菜单选择 Branch/tag...</p><p><img src="https://img-blog.csdn.net/20160630220014017" alt=""></p><p>步骤①是分支地址，这里直接以 /branches/1</p><p>步骤②是取 trunk 版本，HEAD revision 表示最新版本，其他可通过 show log 选择</p><p>执行 OK 后，到 branches 目录 svn update 就可以看到最新的分支了。</p><p><strong>第三步，合并分支到主干</strong></p><p>分支就是开发目录了，现在分支提交一个文件做测试。</p><p><img src="https://img-blog.csdn.net/20160630220948029" alt=""></p><p>然后，合并这个文件分支到主干。</p><p>现在到主干目录，右键 svn 菜单选 Merge...</p><p><img src="https://img-blog.csdn.net/20160630221743149" alt=""></p><p>这个是将分支或主干的修改合并到当前工作目录，继续如下。</p><p><img src="https://img-blog.csdn.net/20160630222117311" alt=""></p><p>接下来点完成，如果没冲突的话，分支文件就合到主干了。</p><p>但这里还要一个操作，就是在主干提交分支合过来的文件。</p><p><img src="https://img-blog.csdn.net/20160630222625138" alt=""></p><p>题外话，之所以要有这一步，除了对分支内容进一步修改，还可以同时合并多个分支。选择权交给用户。</p><p>另外，主干内容合到分支，也是使用 Merge 命令。</p><h2 id="svn-分支应用"><a class="header-anchor" href="#svn-分支应用" aria-hidden="true">#</a> svn 分支应用</h2><p>根据项目的不同，实际上的分支架构也会不同。以我们项目为例，我们是做游戏的，项目过于庞杂，版本迭代非常频繁。在版本 1.1 还没完成时，我们可能就要开发 2.0 版本，这样，版本 1.1 和版本 2.0 就要并行开发。而且，我们对稳定性有非常高的要求。</p><p>为此，我们设计了这样的 svn 架构。</p><p><img src="https://img-blog.csdn.net/20160701095001355" alt=""></p><p><strong>测试分支</strong></p><p>为了保证主干稳定，我们加了测试分支（如 rel_1.1 的测试分支为 rel1.1_test ）。测试分支 1.1 是在分支 1.1 开发结束后开的，等待测试修复 bug 完成后，就会把测试分支 1.1 合入主干及分支 1.1。合并完成后，这个测试分支将会关闭。</p><p><strong>多分支并行</strong></p><p>因为项目需求较多，版本迭代繁杂，所以在版本 1.1 还没结束时，就开了版本 2.0 的分支。当分支 2.0 需要测试合并到主干时，就会从主干合并最新的文件到 2.0 测试分支，测试通过后，再合并到主干。</p><p><strong>分支合并的时机</strong></p><p>对我们而言，不同分支的最大区别是功能上线的时间点。我们根据上线周期划分功能，拆分到不同分支。因为开发需求多，迭代过于频繁，所以靠后的分支对比之前的分支通常只是多了某些新功能。这样，分支的出现，避免了未开发完成的功能影响了已开发完的功能，导致当前版本的不稳定。所以，合并分支的时机就是这个分支的功能要不要上线。</p><p>这样，主干永远是稳定的，也只有经过测试的内容，才会合入主干。同时，多个版本也可以并行。 <a href="https://blog.csdn.net/qq_38568388/article/details/79147009" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_38568388/article/details/79147009</a></p>',44);e.render=function(p,n,e,g,a,l){return t(),s("div",null,[r])};export default e;export{n as __pageData};
