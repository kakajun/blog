import{g as n,j as s,G as a,f as t,q as p}from"./common-bec3f312.js";const o='{"title":"手写 Vue3 数据双向绑定 理解Proxy","frontmatter":{"date":"2020-09-22","title":"手写 Vue3 数据双向绑定 理解Proxy","tags":["proxy","Vue"],"describe":"Vue3的 Proxy 最近貌似各大网红公众号都有发，我也来蹭蹭热度写一篇吧！我们也可以结合vue2来看看vue3到底发生了些什么变化。"},"headers":[{"level":2,"title":"前言","slug":"前言"},{"level":2,"title":"目录结构","slug":"目录结构"},{"level":2,"title":"Proxy是什么？","slug":"proxy是什么？"},{"level":2,"title":"简单用法","slug":"简单用法"},{"level":2,"title":"尝试案例","slug":"尝试案例"},{"level":2,"title":"Proxy - target 参数","slug":"proxy-target-参数"},{"level":2,"title":"Proxy - handler 参数","slug":"proxy-handler-参数"},{"level":2,"title":"handler","slug":"handler"},{"level":2,"title":"什么叫数据双向绑定？","slug":"什么叫数据双向绑定？"},{"level":2,"title":"简单实现数据渲染","slug":"简单实现数据渲染"},{"level":2,"title":"Proxy实现双向绑定","slug":"proxy实现双向绑定"},{"level":2,"title":"回顾 Vue2 双向绑定实现","slug":"回顾-vue2-双向绑定实现"},{"level":2,"title":"Proxy解决了vue2的哪些痛点","slug":"proxy解决了vue2的哪些痛点"},{"level":2,"title":"Proxy的缺陷","slug":"proxy的缺陷"},{"level":2,"title":"延伸阅读","slug":"延伸阅读"}],"relativePath":"docs/vue3-proxy.md","lastUpdated":1644222426224.5986}';var e={};const c=a('<h2 id="前言"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><blockquote><p>vue3的 Proxy 最近貌似各大网红公众号都有发，我也来蹭蹭热度写一篇吧！我们也可以结合vue2来看看vue3到底发生了些什么变化。</p></blockquote><h2 id="目录结构"><a class="header-anchor" href="#目录结构" aria-hidden="true">#</a> 目录结构</h2><ul><li><p>Proxy是什么？</p></li><li><p>简单用法</p></li><li><p>尝试案例</p></li><li><p>proxy - target 参数</p></li><li><p>Proxy - handler 参数</p></li><li><p>handler</p><ul><li>get（）</li><li>set（）</li></ul></li><li><p>什么叫做数据双向绑定？</p></li><li><p>简单实现数据渲染</p></li><li><p>Proxy实现双向绑定</p></li><li><p>回顾 Vue2 双向绑定实现</p></li><li><p>Proxy 解决了Vue2的哪些痛点</p></li><li><p>Proxy 的缺陷</p></li><li><p>延伸阅读</p></li></ul><h2 id="proxy是什么？"><a class="header-anchor" href="#proxy是什么？" aria-hidden="true">#</a> Proxy是什么？</h2><p><code>Proxy</code> 翻译过来就是代理的意思，何为代理呢？就是 用 <code>new</code> 创建一个目标对象（<code>traget</code>）的虚拟化对象，然后代理之后就可以拦截<code>JavaScript</code>引擎内部的底层对象操作；这些底层操作被拦截后会触发响应特定操作的陷阱函数。</p><h2 id="简单用法"><a class="header-anchor" href="#简单用法" aria-hidden="true">#</a> 简单用法</h2><div class="language-js"><pre><code><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>\n</code></pre></div><p><strong>target</strong></p><p>要使用 <code>Proxy</code> 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</p><p><strong>handler</strong></p><p>一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 <code>p</code> 的行为。</p><p><img src="https://pic1.zhimg.com/v2-c2d0fcdc0e98ada08f6e07438a581e6c_b.jpg" alt=""></p><h2 id="尝试案例"><a class="header-anchor" href="#尝试案例" aria-hidden="true">#</a> 尝试案例</h2><p>讲再多，看再多，不如写写再说</p><h2 id="proxy-target-参数"><a class="header-anchor" href="#proxy-target-参数" aria-hidden="true">#</a> Proxy - target 参数</h2><div class="language-js"><pre><code><span class="token comment">// 定义一个空对象</span>\n<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 创建一个 Proxy , 将 data 作为目标对象</span>\n<span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 修改Proxy 代理对象的name属性</span>\nproxy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;严老湿&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;严老湿&#39; }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;严老湿&#39; }</span>\n</code></pre></div><p>看了上面的案例，现在的你应该已经大概知道这个 <code>Proxy</code> 的目标对象（<code>target</code>）是怎么使用的了</p><h2 id="proxy-handler-参数"><a class="header-anchor" href="#proxy-handler-参数" aria-hidden="true">#</a> Proxy - handler 参数</h2><p><code>handler</code> 单独抽离出来作为一个大标题是因为里面的内容有点多</p><h2 id="handler"><a class="header-anchor" href="#handler" aria-hidden="true">#</a> handler</h2><p><code>handler</code> 对象是一个容纳一批特定属性的占位符对象。它包含有 <code>Proxy</code> 的各个捕获器（trap）。它里面的参数有太多了，我们就拿会用到几个讲讲吧！有像深究的同学可以去看看文档 <code>Proxy handler</code> [1]</p><p><strong>handler.set</strong></p><p><code>handler.set()</code> 方法用于拦截设置属性值的操作。</p><p>文档上面呢基本上就是这样写的</p><div class="language-js"><pre><code><span class="token comment">// 定义一个对象</span>\n<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;严老湿&quot;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token string">&#39;24&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// handler 抽离出来</span>\n<span class="token keyword">let</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\np<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>\n</code></pre></div><p>个人习惯直接这样写</p><div class="language-js"><pre><code><span class="token comment">// 定义一个对象</span>\n<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;严老湿&quot;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token string">&#39;24&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 创建一个 Proxy , 将 data 作为目标对象</span>\n<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// target = 目标对象</span>\n    <span class="token comment">// prop = 设置的属性</span>\n    <span class="token comment">// value = 修改后的值</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n    <span class="token comment">// { name: &#39;严老湿&#39;, age: &#39;24&#39; } &#39;age&#39; 18</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 直接修改p就可以了</span>\np<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n<span class="token comment">// { name: &#39;严老湿&#39;, age: &#39;24&#39; }</span>\n</code></pre></div><p>在我们设置值的时候会触发里面的 <code>set</code> 方法；</p><p>我们已经捕捉到修改后的 属性 以及 他的值</p><p>但是打印data 并没有发生任何变化，那这还有啥用呢？</p><p>请看官方示例<code>handler.set()</code>[2]</p><p>在示例中出现了一个 <code>Reflect.set()</code>[3]</p><div class="language-js"><pre><code><span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>Reflect</strong></p><p><code>Reflect</code>对象与<code>Proxy</code>对象一样，也是 ES6 为了操作对象而提供的新 API [4]</p><p>我们需要在 <code>handler.set()</code> 中 <code>return</code> 一个 <code>Reflect.set(...arguments)</code> 来进行赋值给目标对象。</p><p><em>Reflect.set</em></p><p><code>Reflect.set</code>方法设置<code>target</code>对象的<code>name</code>属性等于<code>value</code>。如果<code>name</code>属性设置了赋值函数，则赋值函数的<code>this</code>绑定<code>receiver</code>。</p><p><em>Reflect.get</em></p><p><code>Reflect.get</code>方法查找并返回<code>target</code>对象的<code>name</code>属性，如果没有该属性，则返回<code>undefined</code>。</p><div class="language-js"><pre><code><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;严老湿&quot;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token string">&#39;24&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> newV<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// target = 目标对象</span>\n    <span class="token comment">// prop = 设置的属性</span>\n    <span class="token comment">// newV = 修改后的值</span>\n    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\np<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n<span class="token comment">// { name: &#39;严老湿&#39;, age: 18 }</span>\n</code></pre></div><p>就像这样，已经打印成功了</p><p><strong>handler.get</strong></p><p>刚刚我们已经将 set 理解的已经差不多了，get还会难么？我们来看看</p><div class="language-js"><pre><code><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;严老湿&quot;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token string">&#39;24&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// target = 目标对象</span>\n    <span class="token comment">// prop = 获取的属性</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span>\n    <span class="token comment">// { name: &#39;严老湿&#39;, age: &#39;24&#39; } &#39;age&#39;</span>\n    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>\n    <span class="token comment">// 这里的 Reflect.get 我们在上面已经讲到了</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 获取</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span>\n<span class="token comment">// 24</span>\n</code></pre></div><h2 id="什么叫数据双向绑定？"><a class="header-anchor" href="#什么叫数据双向绑定？" aria-hidden="true">#</a> 什么叫数据双向绑定？</h2><blockquote><p>当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。</p></blockquote><p>上栗子：</p><p>html</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>js</p><div class="language-js"><pre><code><span class="token comment">// 获取元素</span>\n<span class="token keyword">let</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 定义 data</span>\n<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&quot;严老湿&quot;</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token number">24</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 替换成data.age 此时我们页面上应该是有个24</span>\napp<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> data<span class="token punctuation">.</span>age<span class="token punctuation">;</span>\n<span class="token comment">// 我们在这里修改 age </span>\ndata<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// {name: &quot;严老湿&quot;, age: 21}</span>\n</code></pre></div><p>这样看确实没啥毛病</p><p>但是呢在 <code>vue</code> 中，我们在下面异步修改data中的值，页面上的值不应该是跟着一起变化的么？虽然<code>data</code> 对象已经发生变化，但是它并不能触发一些其他操作；</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Foo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>hello {{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>msg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/npm/vue@2.6.12<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        el<span class="token operator">:</span> <span class="token string">&#39;#Foo&#39;</span><span class="token punctuation">,</span>\n        data<span class="token operator">:</span> <span class="token punctuation">{</span>\n            msg<span class="token operator">:</span> <span class="token string">&quot;严家辉&quot;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p><img src="https://pic2.zhimg.com/v2-70935e8fc74695d36aa5392cc1dea159_b.jpg" alt=""></p><p>我们现在对双向绑定有了一个基本的认知。</p><h2 id="简单实现数据渲染"><a class="header-anchor" href="#简单实现数据渲染" aria-hidden="true">#</a> 简单实现数据渲染</h2><p>等会儿我们实现双向绑定，在此之前我们做一个数据渲染过程，也简单的了解一下其原理</p><p>因为内容有点多，所以讲解呢全部在注释里面</p><div class="language-html"><pre><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./src/index.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{name}} \n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n        <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token comment">// 挂载元素</span>\n            el<span class="token operator">:</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span>\n            data<span class="token operator">:</span><span class="token punctuation">{</span>\n                name<span class="token operator">:</span><span class="token string">&quot;严老湿&quot;</span><span class="token punctuation">,</span>\n                age<span class="token operator">:</span><span class="token number">24</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p><code>index.js</code></p><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">Reactive</span><span class="token punctuation">{</span>\n    <span class="token comment">// 接收参数</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>\n        <span class="token comment">// data 赋值</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>$data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n        <span class="token comment">// 挂载元素</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>el<span class="token punctuation">)</span>\n        <span class="token comment">// 调用 compile 函数</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 渲染数据</span>\n    <span class="token function">compile</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 获取el的子元素</span>\n        <span class="token keyword">let</span> child <span class="token operator">=</span> el<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>\n        <span class="token comment">// 遍历判断是否存在文本</span>\n        <span class="token punctuation">[</span><span class="token operator">...</span>child<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n            <span class="token comment">// 如果node的类型是TEXT_NODE</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token comment">// 拿到文本内容</span>\n                <span class="token keyword">let</span> txt <span class="token operator">=</span> node<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span>\n                <span class="token comment">// 正则匹配{{}} 空格</span>\n                <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\{\\{\\s*([^\\s\\{\\}]+)\\s*\\}\\}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                    <span class="token keyword">let</span> $<span class="token number">1</span> <span class="token operator">=</span> RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">;</span>\n                    <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">[</span>$<span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>textContent<span class="token operator">=</span>txt<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">[</span>$<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token punctuation">}</span>\n            <span class="token comment">// 如果node的类型是ELEMENT_NODE</span>\n            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token comment">// 递归执行</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><img src="https://pic3.zhimg.com/v2-9665415016a54f4ea4238f2f325237aa_b.png" alt=""></p><p><img src="https://pic1.zhimg.com/v2-343981cf96a05702e96ae61c3e443c0c_b.jpg" alt=""></p><p>一个简单并且潦草一点的的渲染数据功能已经完成了</p><h2 id="proxy实现双向绑定"><a class="header-anchor" href="#proxy实现双向绑定" aria-hidden="true">#</a> Proxy实现双向绑定</h2><div class="language-html"><pre><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./src/index.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{name}} \n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        {{name}}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n        <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token comment">// 挂载元素</span>\n            el<span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span>\n            data<span class="token operator">:</span> <span class="token punctuation">{</span>\n                name<span class="token operator">:</span> <span class="token string">&quot;严老湿&quot;</span><span class="token punctuation">,</span>\n                age<span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p><code>index.js</code></p><div class="language-js"><pre><code><span class="token comment">// EventTarget [6]</span>\n<span class="token keyword">class</span> <span class="token class-name">Reactive</span> <span class="token keyword">extends</span> <span class="token class-name">EventTarget</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 接收参数</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>\n    <span class="token comment">// data 赋值</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>$data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n    <span class="token comment">// 挂载元素</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 调用 compile 函数</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 调用双向绑定</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 双向绑定</span>\n  <span class="token function">observe</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 备份this</span>\n    <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token comment">// 接收目标对象进行代理</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>$data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 创建一个自定义事件 CustomEvent [5]</span>\n        <span class="token comment">// 事件名称使用的是 prop </span>\n        <span class="token keyword">let</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomEvent</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 传入新的值</span>\n          detail<span class="token operator">:</span> value\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token comment">// 派发 event 事件</span>\n        _this<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 渲染数据</span>\n  <span class="token function">compile</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 获取el的子元素</span>\n    <span class="token keyword">let</span> child <span class="token operator">=</span> el<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>\n    <span class="token comment">// 遍历判断是否存在文本</span>\n    <span class="token punctuation">[</span><span class="token operator">...</span>child<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">node</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果node的类型是TEXT_NODE</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 拿到文本内容</span>\n        <span class="token keyword">let</span> txt <span class="token operator">=</span> node<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span>\n        <span class="token comment">// 正则匹配</span>\n        <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\{\\{\\s*([^\\s\\{\\}]+)\\s*\\}\\}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">let</span> $<span class="token number">1</span> <span class="token operator">=</span> RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">;</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">[</span>$<span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>textContent <span class="token operator">=</span> txt<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">[</span>$<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token comment">// 绑定自定义事件</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 替换成传进来的 detail</span>\n            node<span class="token punctuation">.</span>textContent <span class="token operator">=</span> txt<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> e<span class="token punctuation">.</span>detail<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 如果node的类型是ELEMENT_NODE</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 获取attr </span>\n        <span class="token keyword">let</span> attr <span class="token operator">=</span> node<span class="token punctuation">.</span>attributes<span class="token punctuation">;</span>\n        <span class="token comment">// 判断是否存在v-model属性</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;v-model&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 获取v-model中绑定的值</span>\n          <span class="token keyword">let</span> keyName <span class="token operator">=</span> attr<span class="token punctuation">[</span><span class="token string">&#39;v-model&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nodeValue<span class="token punctuation">;</span>\n          <span class="token comment">// 赋值给元素的value</span>\n          node<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">[</span>keyName<span class="token punctuation">]</span>\n          <span class="token comment">// 绑定事件</span>\n          node<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 当事件触发的时候我们进行赋值</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">[</span>keyName<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>value\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 递归执行</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><img src="https://pic4.zhimg.com/v2-e9317220ee1c2b7eb3a77d04e3c32e6f_b.jpg" alt=""></p><p>这样我们就实现了一个双向绑定的小 demo ，当然代码还不够严谨，比如<code>v-model</code>的元素筛选都还不够完善，只是带大家简单的了解一下实现逻辑</p><h2 id="回顾-vue2-双向绑定实现"><a class="header-anchor" href="#回顾-vue2-双向绑定实现" aria-hidden="true">#</a> 回顾 Vue2 双向绑定实现</h2><p>vue2 大部分同学刷题也经常会碰到 ，我们接下来看看vue2如何实现的呢</p><div class="language-html"><pre><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>txt<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n        <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token comment">// 获取节点</span>\n        <span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#el&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> txt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 修改后的值 进行赋值</span>\n                txt<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> newValue<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 绑定事件</span>\n        el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 赋值给obj数据</span>\n            obj<span class="token punctuation">.</span>foo <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p><img src="https://pic1.zhimg.com/v2-a7845f3f302dc71a39f67563f591c270_b.jpg" alt=""></p><h2 id="proxy解决了vue2的哪些痛点"><a class="header-anchor" href="#proxy解决了vue2的哪些痛点" aria-hidden="true">#</a> Proxy解决了vue2的哪些痛点</h2><ul><li><code>Object.defineProperty</code>只能劫持对象的属性，而Proxy是直接代理对象；</li><li><code>Object.defineProperty</code>对新增属性需要手动进行<code>Observe</code>；</li><li><code>vue2.x</code>无法监控到数组下标的变化,因为<code>vue2</code>放弃了这个特性；</li><li>Proxy支持13种拦截操作，这是<code>defineProperty</code>所不具有的；</li></ul><h2 id="proxy的缺陷"><a class="header-anchor" href="#proxy的缺陷" aria-hidden="true">#</a> Proxy的缺陷</h2><p>其他的不想多说，就一个 兼容真的挺难受的，硬伤了</p><p><img src="https://pic1.zhimg.com/v2-750c2cb93c4a8db9097ffb4cb617dc10_b.jpg" alt=""></p><h2 id="延伸阅读"><a class="header-anchor" href="#延伸阅读" aria-hidden="true">#</a> 延伸阅读</h2><p>[1] <a href="https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler</a></p><p>[2] <a href="https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/set" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/set</a></p><p>[3] <a href="https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set</a></p><p>[4] <a href="https://link.zhihu.com/?target=https%3A//www.cnblogs.com/zczhangcui/p/6486582.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/zczhangcui/p/6486582.html</a></p><p>[5] <a href="https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/API/CustomEvent" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/CustomEvent</a></p><p>[6] <a href="https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/API/EventTarget" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget</a></p>',89);e.render=function(a,o,e,l,u,k){const i=p("Comment");return t(),n("div",null,[c,s(i)])};export default e;export{o as __pageData};
